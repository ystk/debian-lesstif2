.\"
.\" $Header: /cvsroot/lesstif/lesstif/doc/lessdox/widgets/LessTifInternals.3,v 1.6 2009/04/29 12:23:30 paulgevers Exp $
.\"
.\" Copyright (C) 1997-1998 Free Software Foundation, Inc.
.\" 
.\" This file is part of the GNU LessTif Library.
.\" This library is free software; you can redistribute it and/or
.\" modify it under the terms of the GNU Library General Public
.\" License as published by the Free Software Foundation; either
.\" version 2 of the License, or (at your option) any later version.
.\" 
.\" This library is distributed in the hope that it will be useful,
.\" but WITHOUT ANY WARRANTY; without even the implied warranty of
.\" MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
.\" Library General Public License for more details.
.\" 
.\" You should have received a copy of the GNU Library General Public
.\" License along with this library; if not, write to the Free
.\" Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
.\" 
.TH "LessTif Internal Functions" 3 "April 1998" "LessTif Project" "LessTif Manuals"
.SH NAME
_Xm* \- LessTif Internal Functions
.SH DESCRIPTION
When the LessTif project began some discussion was undertaken
about the use of the previously undocumented
internal _Xm.. functions in Motif 1.2.
Apparently many of those functions have been transformed to Xme.. functions
in OSF/Motif\(rg 2.x and are also documented.
As many people use these functions in their code
(especially widget writers) the implementation of the _Xm.. functions
is important to the LessTif project.
.PP
Below is a (outdated!) list of functions currently taken from the LessTif header files. 
.SH CONVENIENCE FUNCTIONS
.PP
.BR "void _XmCalcLabelDimensions(Widget w);"
.PP
Sets the core width and height values to the values needed to display the current
label contents.  It takes into account the label type as well as all of the margin
resources.
.PP
.BR "Boolean _XmGetInDragMode(Widget w);"
.PP
returns True, if the widget (e.g. push button,...)
resides in a menu and the user is currently dragging the
mouse with button 1 pressed over the menu items.
This way a widget can figure out, whether it must
redraw itself in the armed state if the widget gets a PrimitiveEnter action. 
.PP
.BR "Boolean _XmIsEventUnique(XEvent *event);"
.PP
Unknown Function 
.PP
.BR "Widget _XmGetRC_PopupPosted(Widget w);"
.PP
Returns the widget id of the parent of the menu that is currently posted by
any of the children of w.  In other words the id of the shell that is cascaded
from menu w.
.PP
.BR "void _XmRecordEvent(XEvent *event); "
.PP
Unknown Function 
.PP
.BR "void _XmSetInDragMode(Widget w, Boolean flag);"
.PP
this is used to enter or leave the dragging mode within the menu system. 
.PP
.BR "XmFontListEntry _XmFontListEntryFromTag(XmFontList fontlist, char *tag);"
.PP
Unknown Function 
.PP
.BR "Boolean _XmCreateVisibilityRect(Widget w, XRectangle *rectPtr);"
.PP
Unknown Function 
.PP
.BR "Boolean _XmCvtStringToXmNavigation(Display *, XrmValue *, Cardinal *, XrmValue *, XrmValue *, XtPointer *);"
.PP
Unknown Function 
.PP
.BR "Boolean _XmCvtStringToXmString(Display *, XrmValue *, Cardinal *, XrmValue *, XrmValue *, XtPointer *);"
.PP
Unknown Function 
.PP
.BR "Boolean _XmFocusIsHere(Widget w);"
.PP
Unknown Function 
.PP
.BR "Boolean _XmFocusIsInShell(Widget wid);"
.PP
Unknown Function 
.PP
.BR "Boolean _XmGrabTheFocus(Widget w, XEvent *event);"
.PP
Unknown Function 
.PP
.BR "Boolean _XmIsNavigable(Widget wid);"
.PP
Unknown Function 
.PP
.BR "Boolean _XmNavigSetValues(Widget current, Widget request, Widget new_wid, ArgList args, Cardinal *num_args);"
.PP
Unknown Function 
.PP
.BR "Boolean _XmSearchColorCache(unsigned int which, XmColorData *values, XmColorData **ret);"
.PP
Unknown Function 
.PP
.BR "Boolean _XmShellIsExclusive(Widget wid);"
.PP
Unknown Function 
.PP
.BR "Boolean _XmStringsAreEqual() "
.PP
Unknown Function 
.PP
.BR "Pixel _XmAccessColorData(XmColorData *cd, unsigned char which);"
.PP
Unknown Function 
.PP
.BR "Pixel _XmBlackPixel(Screen *screen, Colormap colormap, XColor blackcolor);"
.PP
Unknown Function 
.PP
.BR "Pixel _XmWhitePixel(Screen *screen, Colormap colormap, XColor whitecolor);"
.PP
Unknown Function 
.PP
.BR "Pixmap _XmGetPixmap();"
.PP
Unknown Function 
.PP
.BR "String _XmGetDefaultBackgroundColorSpec(Screen *screen);"
.PP
Unknown Function 
.PP
.BR "Time __XmGetDefaultTime(Widget w, XEvent *event);"
.PP
Unknown Function 
.PP
.BR "Widget _XmFindNextTabGroup(Widget wid);"
.PP
Unknown Function 
.PP
.BR "Widget _XmFindPrevTabGroup(Widget wid);"
.PP
Unknown Function 
.PP
.BR "Widget _XmFindTopMostShell(Widget w);"
.PP
Unknown Function 
.PP
.BR "Widget _XmGetActiveItem(Widget w);"
.PP
Unknown Function 
.PP
.BR "Widget _XmGetFirstFocus(Widget wid);"
.PP
Unknown Function 
.PP
.BR "Widget _XmNavigate(Widget wid, XmTraversalDirection direction);"
.PP
Unknown Function 
.PP
.BR "XmColorData *_XmAddToColorCache(XmColorData *new_rec);"
.PP
Unknown Function 
.PP
.BR "XmColorData *_XmGetColors(Screen *screen, Colormap color_map, Pixel background);"
.PP
Unknown Function 
.PP
.BR "XmColorData *_XmGetDefaultColors(Screen *screen, Colormap color_map);"
.PP
Unknown Function 
.PP
.BR "XmFocusData _XmCreateFocusData();"
.PP
Unknown Function 
.PP
.BR "XmFocusData _XmGetFocusData(Widget wid);"
.PP
Unknown Function 
.PP
.BR "XmFontList _XmGetDefaultFontList(Widget w, unsigned char fontListType);"
.PP
Unknown Function 
.PP
.BR "XmGadget _XmInputForGadget(Widget cw, int x, int y);"
.PP
Unknown Function 
.PP
.BR "XmGadget _XmInputInGadget(Widget cw, int x, int y);"
.PP
Unknown Function 
.PP
.BR "char * _XmGetBGPixmapName();"
.PP
Unknown Function 
.PP
.BR "char *_XmConvertCSToString(XmString cs);"
.PP
Unknown Function 
.PP
.BR "int _XmEmptyRect(XRectangle *r);"
.PP
Unknown Function 
.PP
.BR "int _XmIntersectRect(XRectangle *srcRectA, Widget widget, XRectangle *dstRect);"
.PP
Unknown Function 
.PP
.BR "unsigned char _XmGetFocusPolicy(Widget w);"
.PP
Unknown Function 
.PP
.BR "void _XmBackgroundColorDefault(Widget widget, int offset, XrmValue *value);"
.PP
Unknown Function 
.PP
.BR "void _XmBottomShadowColorDefault(Widget widget, int offset, XrmValue *value);"
.PP
Unknown Function 
.PP
.BR "void _XmCallFocusMoved(Widget old, Widget new_wid, XEvent *event);"
.PP
Unknown Function 
.PP
.BR "void _XmClearBGPixmap();"
.PP
Unknown Function 
.PP
.BR "void _XmClearFocusPath(Widget wid);"
.PP
Unknown Function 
.PP
.BR "void _XmClearRect(XRectangle *r);"
.PP
Unknown Function 
.PP
.BR "void _XmConfigureObject(Widget g, Position x, Position y, Dimension width, Dimension height, Dimension border_width);"
.PP
_XmConfigureObject is a wrapper around
.BR XtConfigureWidget (3)
which insulates a widget writer from the burden of checking whether an object
is a widget or a gadget.
The way for a manager widget
(any subclass of XmManager;
they're supposed to do geometry management for their children)
to set the layout of a child is to use this function.
In the case of a widget, XtConfigureWidget is called.
For a gadget, the geometry fields are manipulated directly.
.PP
.BR "void _XmDestroyFocusData(XmFocusData focusData);"
.PP
Unknown Function 
.PP
.BR "void _XmDispatchGadgetInput(Widget g, XEvent *event, Mask mask);"
.PP
Unknown Function 
.PP
.BR "void _XmFocusModelChanged(Widget wid, XtPointer client_data, XtPointer call_data);"
.PP
Unknown Function 
.PP
.BR "void _XmForegroundColorDefault(Widget widget, int offset, XrmValue *value);"
.PP
Unknown Function 
.PP
.BR "void _XmGetDefaultThresholdsForScreen(Widget widget, int offset, XrmValue *value);"
.PP
Unknown Function 
.PP
.BR "void _XmHighlightColorDefault(Widget widget, int offset, XrmValue *value);"
.PP
Unknown Function 
.PP
.BR "void _XmManagerHighlightPixmapDefault(Widget widget, int offset, XrmValue *value);"
.PP
Unknown Function 
.PP
.BR "void _XmManagerTopShadowPixmapDefault(Widget widget, int offset, XrmValue *value);"
.PP
Unknown Function 
.PP
.BR "void _XmMgrTraversal(Widget wid, XmTraversalDirection direction);"
.PP
Unknown Function 
.PP
.BR "void _XmMoveObject(Widget g, Position x, Position y);"
.PP
Unknown Function 
.PP
.BR "void _XmNavigChangeManaged(Widget wid);"
.PP
Unknown Function 
.PP
.BR "void _XmNavigDestroy(Widget wid);"
.PP
Unknown Function 
.PP
.BR "void _XmNavigInitialize(Widget request, Widget new_wid, ArgList args, Cardinal num_args);"
.PP
Unknown Function 
.PP
.BR "void _XmNavigResize(Widget wid);"
.PP
Unknown Function 
.PP
.BR "void _XmPrimitiveEnter(Widget w, XEvent *event, String *params, Cardinal num_params);"
.PP
Unknown Function 
.PP
.BR "void _XmPrimitiveHighlightPixmapDefault(Widget widget, int offset, XrmValue *value);"
.PP
Unknown Function 
.PP
.BR "void _XmPrimitiveLeave(Widget w, XEvent *event, String *params, Cardinal num_params);"
.PP
Unknown Function 
.PP
.BR "void _XmPrimitiveTopShadowPixmapDefault(Widget widget, int offset, XrmValue *value);"
.PP
Unknown Function 
.PP
.BR "void _XmProcessTraversal(Widget w, XmTraversalDirection dir, Boolean check);"
.PP
Unknown Function 
.PP
.BR "void _XmRedisplayGadgets(Widget w, XEvent *event, Region region);"
.PP
Unknown Function 
.PP
.BR "void _XmRegisterConverters();"
.PP
Unknown Function 
.PP
.BR "void _XmRegisterPixmapConverters();"
.PP
Unknown Function 
.PP
.BR "void _XmResetTravGraph(Widget wid);"
.PP
Unknown Function 
.PP
.BR "void _XmResizeObject(Widget g, Dimension width, Dimension height, Dimension border_width);"
.PP
Unknown Function 
.PP
.BR "void _XmSetActiveTabGroup(XmFocusData focusData, Widget tabGroup);"
.PP
Unknown Function 
.PP
.BR "void _XmSetDefaultBackgroundColorSpec(Screen *screen, String new_color_spec);"
.PP
Unknown Function 
.PP
.BR "void _XmSetInitialOfTabGroup(Widget tab_group, Widget init_focus);"
.PP
Unknown Function 
.PP
.BR "void _XmSetRect(XRectangle *rect, Widget w);"
.PP
Unknown Function 
.PP
.BR "void _XmTopShadowColorDefault(Widget widget, int offset, XrmValue *value);"
.PP
Unknown Function 
.PP
.BR "void _XmValidateFocus(Widget wid);"
.PP
Unknown Function 
.PP
.BR "void _XmWarning(Widget w, char *message);"
.PP
Unknown Function 
.PP
.BR "void _XmWidgetFocusChange(Widget wid, XmFocusChange change);"
.PP
Unknown Function 
.PP
.BR "void _XmCascadePixmapDefault(Widget w, int offset, XrmValue *val);"
.PP
Unknown Function 
.PP
.BR "void _XmClearBorder(Display *display, Window win, int x, int y, Dimension width, Dimension height, Dimension shadow_thickness)"
.PP
Unknown Function 
.PP
.BR "void _XmDefaultButtonShadowThickness(Widget w, int offset, XrmValue *val);"
.PP
Unknown Function 
.PP
.BR "void _XmDefaultMultiClick(Widget w, int offset, XrmValue *val);"
.PP
Unknown Function 
.PP
.BR "void _XmDrawArrow(Display *display, Window win, GC bottomGC, GC topGC, GC fillGC, Position x, Position y, Dimension width, Dimension height, Dimension shadow_thickness, unsigned char direction);"
.PP
Unknown Function 
.PP
.BR "void _XmDrawDiamond(Display *display, Window win, GC bottomGC, GC topGC, GC selectGC, Position x, Position y, Dimension width, Dimension height, Dimension shadowThickness, Dimension fill);"
.PP
Unknown Function 
.PP
.BR "void _XmDrawSeparator(Display *display, Window win, GC top_gc, GC bottom_gc, separator_GC, Position wx, Position wy, Dimension wwidth, Dimension wheight, Dimension shadowThickness, Dimension margin, unsigned char orientation, unsigned char separator_type);"
.PP
Unknown Function 
.PP
.BR "void _XmDrawShadowDisplay *display, Drawable d, GC top_gc, GC bottom_gc, Dimension shad_thick, Position x, Position y, Dimension width, Dimension height);"
.PP
Unknown Function 
.PP
.BR "void _XmDrawShadows(Display *display, Window win, GC topShadowGC, GC bottomShadowGC, Position x, Position y, Dimension width, Dimension height, Dimension shadowThickness, unsigned int shadowType);"
.PP
Unknown Function 
.PP
.BR "void _XmFontListGetDefaultFont(XmFontList fontlist, XFontStruct **font_struct);"
.PP
Unknown Function 
.PP
.BR "void _XmFrameHorizSpaceDefault(Widget w, int offset, XrmValue *val);"
.PP
Unknown Function 
.PP
.BR "void _XmFrameShadowThicknessDefault(Widget w, int offset, XrmValue *val);"
.PP
Unknown Function 
.PP
.BR "void _XmFrameShadowTypeDefault(Widget w, int offset, XrmValue *val);"
.PP
Unknown Function 
.PP
.BR "void _XmInitializeWidgetSet();"
.PP
Unknown Function 
.PP
.BR "void _XmRowColumnEntryClassDefault(Widget w, int offset, XrmValue *val);"
.PP
Unknown Function 
.PP
.BR "void _XmRowColumnIsHomogeneousDefault(Widget w, int offset, XrmValue *val);"
.PP
Unknown Function 
.PP
.BR "void _XmRowColumnMarginDefault(Widget w, int offset, XrmValue *val);"
.PP
Unknown Function 
.PP
.BR "void _XmRowColumnMenuAcceleratorDefault(Widget w, int offset, XrmValue *val);"
.PP
Unknown Function 
.PP
.BR "void _XmRowColumnPackingDefault(Widget w, int offset, XrmValue *val);"
.PP
Unknown Function 
.PP
.BR "void _XmRowColumnSpacingDefault(Widget w, int offset, XrmValue *val);"
.PP
Unknown Function 
.PP
.BR "void _XmScrollBarMaximumDefault(Widget w, int offset, XrmValue *val);"
.PP
Unknown Function 
.PP
.BR "void _XmScrollBarProcessingDirectionDefault(Widget w, int offset, XrmValue *val);"
.PP
Unknown Function 
.PP
.BR "void _XmScrollBarSliderSizeDefault(Widget w, int offset, XrmValue *val);"
.PP
Unknown Function 
.PP
.BR "void _XmScrollBarTroughColorDefault(Widget w, int offset, XrmValue *val);"
.PP
Unknown Function 
.PP
.BR "void _XmScrollBarValueDefault(Widget w, int offset, XrmValue *val);"
.PP
Unknown Function 
.PP
.BR "void _XmSelectColorDefault(Widget w, int offset, XrmValue *val);"
.PP
Unknown Function 
.PP
.BR "void _XmToggleButtonIndicatorTypeDefault(Widget w, int offset, XrmValue *val);"
.PP
Unknown Function 
.PP
.BR "void _XmVendorShellVirtualBindingsDefault(Widget w, int offset, XrmValue *val);"
.PP
Unknown Function 
.PP
.BR "String _XmOSGetHomeDirName(void);"
.PP
Unknown Function 
.PP
.BR "XmString _XmOSGetLocalizedString(char *reserved, "
.PP
Unknown Function 
.PP
.BR "int _XmMicroSleep(long secs);"
.PP
Unknown Function 
.PP
.BR "void _XmInternAtomAndName(Display *display, Atom atom, String name);"
.PP
Associates an atom name with an atom id (and vice versa)
without the need to query the X server first for the atom id.
This way any name to id mapping (as well as the id to name mapping)
can be set on a given display. 
.PP
.BR "void _XmVirtualToActualKeysym(Display *Dsp, KeySym VirtualKeysym, KeySym *RealKeysymReturn, Modifiers *ModifierReturn);"
.PP
For the given virtual keysym (which must be one of the = osfXK_xxx keysyms)
returns the real keysym as
well as the modifiers which make up that particular virtual keysym.
If asked for an invalid virtual keysym,
_XmVirtualToActualKeysym returns NoSymbol for the real keysym. 
.PP
.BR "int _XmVirtKeysLoadFallbackBindings(Display *Dsp, String *Bindings);" 
.PP
Installs the default key bindings for a specific display. If th= ere are any vendor specific default bindings
available, then the appropiate one= will be installed instead of the fallback key bindings. Additionally, the
bindings installed are returned in Bindings. The caller is responsible for freeing the space occupied by this
key binding description string. The return code seems to be always zero. At least LessTif will always
retur= n a zero... 
.PP
.BR "Boolean _XmVirtKeysLoadFileBindings(String filename, String *binding= );"
.PP
Reads in a file containing a description of the virtual key bindings. If succesful, returns True and the
description string. The caller= is responsible for freeing the memory lateron. 
.PP
.BR "void _XmVirtKeysInitialize(Widget w);"
.PP
Sets up the virtual key bindings for a display. The widget specified must be a XmDisplay widget, otherwise
_XmVirtKeysInitialize will deny the attempt to set up the key bindings. The function first checks several
places in order to catch up key binding description. If all fails, it will install fallback key bindings. This
internal function is called during when initializing a XmDisplay widget. 
.PP
.BR "void _XmVirtKeysDestroy(Widget w);"
.PP
Cleanup any leftovers from the virtual binding mechanism when destroying a XmDisplay widget. 
.PP
.BR "void _XmVirtKeysHandler(Widget w, XtPointer Data, XEvent *Event, Boolean *ContDispatch);"
.PP
This handler is installed on every widget. It just records the current key press event in an widget instance
field private to a XmDisplay widget. 
.SH SEE ALSO
.BR lesstif (1x)
