'\" t
.\" $Header: /cvsroot/lesstif/lesstif/doc/lessdox/widgets/XmText.3,v 1.6 2009/04/29 12:23:30 paulgevers Exp $
.\"
.\" Copyright (C) 1997-1998 Free Software Foundation, Inc.
.\" 
.\" This file is part of the GNU LessTif Library.
.\" This library is free software; you can redistribute it and/or
.\" modify it under the terms of the GNU Library General Public
.\" License as published by the Free Software Foundation; either
.\" version 2 of the License, or (at your option) any later version.
.\" 
.\" This library is distributed in the hope that it will be useful,
.\" but WITHOUT ANY WARRANTY; without even the implied warranty of
.\" MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
.\" Library General Public License for more details.
.\" 
.\" You should have received a copy of the GNU Library General Public
.\" License along with this library; if not, write to the Free
.\" Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
.\" 
.TH XmText 3 "April 1998" "LessTif Project" "LessTif Manuals"
.SH NAME
XmText \- Motif-compatible text-editing widget
.SH SYNOPSIS
.B #include <Xm/Text.h>
.PP
.B XmText
.PP
.B XmCreateText
.SH DESCRIPTION
XmText
.SH X RESOURCES
.TS
tab(;);
l l l l l.
Name;Class;Type;Default;Access
_
XmNsource;XmCSource;Pointer;NULL;CSG
XmNactivateCallback;XmCCallback;Callback;NULL;CSG
XmNfocusCallback;XmCCallback;Callback;NULL;CSG
XmNlosingFocusCallback;XmCCallback;Callback;NULL;CSG
XmNvalueChangedCallback;XmCCallback;Callback;NULL;CSG
XmNmodifyVerifyCallback;XmCCallback;Callback;NULL;CSG
XmNmodifyVerifyCallbackWcs;XmCCallback;Callback;NULL;CSG
XmNmotionVerifyCallback;XmCCallback;Callback;NULL;CSG
XmNgainPrimaryCallback;XmCCallback;Callback;NULL;CSG
XmNlosePrimaryCallback;XmCCallback;Callback;NULL;CSG
XmNvalue;XmCValue;String;;CSG
XmNvalueWcs;XmCValueWcs;ValueWcs;(null);CSG
XmNmaxLength;XmCMaxLength;Int;2147483647;CSG
XmNmarginHeight;XmCMarginHeight;VerticalDimension;NULL;CSG
XmNmarginWidth;XmCMarginWidth;HorizontalDimension;NULL;CSG
XmNoutputCreate;XmCOutputCreate;Function;NULL;CSG
XmNinputCreate;XmCInputCreate;Function;NULL;CSG
XmNtopCharacter;XmCTopCharacter;TextPosition;NULL;CSG
XmNcursorPosition;XmCCursorPosition;TextPosition;NULL;CSG
XmNeditMode;XmCEditMode;EditMode;NULL;CSG
XmNautoShowCursorPosition;XmCAutoShowCursorPosition;Boolean;NULL;CSG
XmNeditable;XmCEditable;Boolean;NULL;CSG
XmNverifyBell;XmCVerifyBell;Boolean;NULL;CSG
XmNshadowThickness;XmCShadowThickness;HorizontalDimension;NULL;CSG
XmNhighlightThickness;XmCHighlightThickness;HorizontalDimension;NULL;CSG
XmNnavigationType;XmCNavigationType;NavigationType;NULL;CSG
.TE
.PP
.BR XmNsource
.PP
.BR XmNactivateCallback
.PP
.BR XmNfocusCallback
.PP
.BR XmNlosingFocusCallback
.PP
.BR XmNvalueChangedCallback
.PP
.BR XmNmodifyVerifyCallback
.PP
.BR XmNmodifyVerifyCallbackWcs
.PP
.BR XmNmotionVerifyCallback
.PP
.BR XmNgainPrimaryCallback
.PP
.BR XmNlosePrimaryCallback
.PP
.BR XmNvalue
.PP
.BR XmNvalueWcs
.PP
.BR XmNmaxLength
.PP
.BR XmNmarginHeight
.PP
.BR XmNmarginWidth
.PP
.BR XmNoutputCreate
.PP
.BR XmNinputCreate
.PP
.BR XmNtopCharacter
.PP
.BR XmNcursorPosition
.PP
.BR XmNeditMode
.PP
.BR XmNautoShowCursorPosition
.PP
.BR XmNeditable
.PP
.BR XmNverifyBell
.PP
.BR XmNshadowThickness
.PP
.BR XmNhighlightThickness
.PP
.BR XmNnavigationType
.PP
.SH CLASS HIERARCHY
.BR Object (3)
.BR Rect (3)
.BR UnNamedObj (3)
.BR Core (3)
.BR XmPrimitive (3)
.BR XmText (3)
.SH CALLBACKS
The XmText widget defines a large number of callback lists :
.BR XmNactivateCallback ,
.BR XmNfocusCallback ,
.BR XmNlosingFocusCallback ,
.BR XmNvalueChangedCallback ,
.BR XmNmodifyVerifyCallback ,
.BR XmNmodifyVerifyCallbackWcs ,
.BR XmNmotionVerifyCallback ,
.BR XmNgainPrimaryCallback ,
.BR XmNlosePrimaryCallback .
The XmNactivateCallback can only be called
if the XmNeditMode is XmSINGLE_LINE_EDIT.
.SM
  typedef struct {
      int  reason;
      XEvent *event; 
      Boolean doit;
      XmTextPosition currInsert, newInsert;
      XmTextPosition startPos, endPos;
      XmTextBlock text;
  } XmTextVerifyCallbackStruct, *XmTextVerifyPtr;
  
  typedef struct {
      char *ptr;
      int length;
      XmTextFormat format;
  } XmTextBlockRec, *XmTextBlock;
  
  typedef struct {
      wchar_t *wcsptr;
      int length;
  } XmTextBlockRecWcs, *XmTextBlockWcs;
  
  typedef struct {
      int  reason;
      XEvent *event; 
      Boolean doit;
      XmTextPosition currInsert, newInsert;
      XmTextPosition startPos, endPos;
      XmTextBlockWcs text;
  } XmTextVerifyCallbackStructWcs, *XmTextVerifyPtrWcs;
.SM
.SH ACTIONS
.TS
tab(;);
l.
activate()
backward-character()
backward-paragraph()
backward-word()
beep()
beginning-of-file()
beginning-of-line()
clear-selection()
copy-clipboard()
copy-primary()
copy-to()
cut-clipboard()
cut-primary()
delete-next-character()
delete-previous-character()
delete-next-word()
delete-previous-word()
delete-selection()
delete-to-end-of-line()
delete-to-start-of-line()
delete-all()
do-quick-action()
end-of-file()
end-of-line()
extend-adjust()
extend-end()
extend-start()
forward-character()
forward-paragraph()
forward-word()
focus-in()
focus-out()
grab-focus()
Help()
insert-string()
key-select()
kill-next-character()
kill-next-word()
kill-previous-character()
kill-previous-word()
kill-selection()
kill-to-end-of-line()
kill-to-start-of-line()
move-destination()
move-to()
newline()
newline-and-backup()
newline-and-indent()
next-line()
next-page()
next-tab-group()
page-left()
page-right()
paste-clipboard()
prev-tab-group()
previous-line()
previous-page()
process-bdrag()
process-cancel()
process-down()
process-up()
process-home()
process-return()
process-shift_down()
process-shift-up()
process-tab()
quick-copy-set()
quick-cut-set()
redraw-display()
scroll-one-line-down()
scroll-one-line-up()
secondary-adjust()
secondary-notify()
secondary-start()
select-adjust()
select-all()
select-end()
select-start()
self-insert()
set-anchor()
set-insertion-point()
set-selection-hint()
toggle-add-mode()
traverse-home()
traverse-next()
traverse-prev()
unkill()
.TE
.SH CONVENIENCE FUNCTIONS
.BR "XmTextClearSelection(Widget w,Time time)"
.PP
Clears the primary selection from the Text Widget.
.PP
.BR "Boolean XmTextCopy(Widget w,Time time)"
.PP
Copies the primary selection from the Text Widget to the Clipboard.
.PP
.BR "Boolean XmTextCut(Widget w,Time time)"
.PP
Copies the primary selection from the Text Widget to the Clipboard and deletes it from the Text Widget.
.PP
.BR "int XmTextGetBaseline(Widget w)"
.PP
Gets the X position of the first baseline in the Text Widget.
.PP
.BR "Boolean XmTextGetEditable(Widget w)"
.PP
Determine the Editable permission state.
.PP
.BR "XmTextPosition XmTextGetInsertionPositiom(Widget w)"
.PP
Determine the insertion position of the cursor.
.PP
.BR "XmTextPosition XmTextGetLastPosition(Widget w)"
.PP
Determine the position of the last character in the Text Widget.
.PP
.BR "int XmTextGetMaxLength(Widget w)"
.PP
Determine the maximum allowable text string length. 
.PP
.BR "char *XmTextGetSelection(Widget w)"
.PP
Gets the string that is in the primary selection. 
.PP
.BR "Boolean XmTextGetSelectionPosition(Widget w,XmTextPosition *left,XmTextPosition *right)"
.PP
Accesses the position of the Lest and Right position of the primary position.
.PP
.BR "XmTextSource XmTextGetSource(Widget w)"
.PP
obtain the source of the Text Widget. 
.PP
.BR "char *XmTextGetString(Widget w)"
.PP
Obtain the text from the Text Widget. 
.PP
.BR "XmTextPosition XmTextGetTopCharacter(Widget w)"
.PP
Determine the position of the top of the text in the Text Widget.
.PP
.BR "void XmTextInsert(Widget w,XmTextPosition pos ,char *value)"
.PP
Insert a string into the text string at a position determined by pos.
.PP
.BR "Boolean XmTextPaste(Widget w)"
.PP
Insert the clipboard selection into the Text Widget.
.PP
.BR "Boolean XmTextPosToXY(Widget w,XmTextPosition pos, Position *x,Position *y)"
.PP
Converts a TextPosition into a x,y position.
.PP
.BR "Boolean XmTextRemove(Widget w)"
.PP
Deletes the primary selection.
.PP
.BR "void XmTextReplace(Widget w,XmTextPosition a,XmTextPosition b,char *value)"
.PP
Replace the text from a to b with that given in value.
.PP
.BR "void XmTextScroll(Widget w,int num_of_lines)"
.PP
Scroll the TextWidget num_of_lines.
.PP
.BR "void XmTextSetAddMode(Widget w,Boolean state)"
.PP
Sets the Add Mode state of the Text Widget.
.PP
.BR "void XmTextSetEditable(Widget w,Boolean state)"
.PP
Sets the Editable state of the Text Widget.
.PP
.BR "void XmTextSetHighlight(Widget w,XmTextPosition left,XmTextPosition right, XmHighLightMode mode)"
.PP
Highlights the text between the two positions. 
.PP
.BR "void XmTextSetInsertionPosition(Widget w,XmTextPosition pos)"
.PP
Set the position of the insertion cursor.
.PP
.BR "void XmTextSetMaxLength(Widget w,int max_length)"
.PP
Set the maximum length of the text string of the text widget.
.PP
.BR "void XmTextSetSelection(Widget w,XmTextPosition first,XmTextPosition last,Time time)"
.PP
Set the primary selection of of the text widget.
.PP
.BR "void XmTextSetSource(Widget w,XmTextSource source,XmTextPosition top_char,XmTextPosition cursor_pos)"
.PP
Set the text source for the text widget.
.PP
.BR "void XmTextSetString(Widget w,char *value)"
.PP
Set the String value.
.PP
.BR "void XmTextSetTopCharacter(Widget w,XmTextPosition top_character)"
.PP
Sets the position of the first character displayed.
.PP
.BR "void XmTextShowPosition(Widget w,XmTextPosition)"
.PP
Show the text at a given position.
.PP
.BR "XmTextPosition XmTextXYToPos(Widget w,Position x,Position y)"
.PP
Converts an X,Y position into an XmTextPosition.
.SH SEE ALSO
